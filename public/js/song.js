// Generated by CoffeeScript 1.3.3
(function() {

  Echotron.Song = (function() {

    _.extend(Song.prototype, Backbone.Events);

    function Song() {
      var eventType, _i, _len, _ref;
      this.lastScheduledIndices = {};
      _ref = this.eventTypes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        eventType = _ref[_i];
        this.lastScheduledIndices[eventType] = 0;
      }
    }

    Song.prototype.eventTypes = ['beat', 'bar', 'tatum', 'segment', 'section'];

    Song.prototype.load = function(name, cb) {
      var _this = this;
      this.name = name;
      if (this.name && this.name !== '') {
        this.audio = $('<audio id="audio" preload="auto" controls>');
        this.audio.attr({
          src: "songs/" + this.name + ".m4a"
        });
        $('body').append(this.audio);
        this.audio.on('canplay', function() {
          return cb(_this);
        });
        return $.ajax({
          url: "songs/" + this.name + ".json",
          dataType: 'json',
          async: false,
          success: function(data) {
            _this.data = data;
            _this.bpm = _this.data.track.tempo;
            return _this.bps = _this.bpm / 60;
          }
        });
      } else {
        this.noSong = true;
        this.loadDefaultSong();
        setTimeout((function() {
          return cb(_this);
        }), 0);
        return console.log("No song selected, using " + this.bpm + "bpm");
      }
    };

    Song.prototype.generateSongEvents = function(duration) {
      var i, _i, _results;
      if (duration == null) {
        duration = 1;
      }
      _results = [];
      for (i = _i = 0; _i < 600; i = _i += duration) {
        _results.push({
          start: i / this.bps,
          duration: duration / this.bps,
          confidence: 1
        });
      }
      return _results;
    };

    Song.prototype.loadDefaultSong = function() {
      this.bpm = 90;
      this.bps = this.bpm / 60;
      return this.data = {
        meta: {},
        track: {
          duration: 600,
          tempo: 60,
          time_signature: 4,
          key: 0,
          mode: 0
        },
        sections: this.generateSongEvents(16),
        bars: this.generateSongEvents(4),
        beats: this.generateSongEvents(1),
        tatums: this.generateSongEvents(1 / 4),
        segments: this.generateSongEvents(1 / 16)
      };
    };

    Song.prototype.scheduleEvents = function() {
      var eventData, eventType, events, playHead, _i, _len, _ref,
        _this = this;
      playHead = this.audio ? this.audio[0].currentTime : (this.startedAt || (this.startedAt = Date.now()), (Date.now() - this.startedAt) / 1000);
      _ref = this.eventTypes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        eventType = _ref[_i];
        events = this.data["" + eventType + "s"];
        while (true) {
          eventData = events[this.lastScheduledIndices[eventType]];
          if (!eventData) {
            break;
          }
          if (!(eventData.start < playHead + 1)) {
            break;
          }
          this.lastScheduledIndices[eventType]++;
          (function(eventType, eventData) {
            return setTimeout(function() {
              if (_this.audio && eventType === 'bar') {
                console.log('audio sync', _this.audio[0].currentTime - eventData.start);
              }
              return _this.trigger(eventType, eventData);
            }, (eventData.start - playHead) * 1000);
          })(eventType, eventData);
        }
      }
    };

    Song.prototype.start = function(playAudio) {
      var _this = this;
      if (playAudio == null) {
        playAudio = true;
      }
      if (this.noSong) {
        return setInterval(function() {
          return _this.scheduleEvents();
        }, 250);
      } else {
        this.audio.on('timeupdate', function() {
          return _this.scheduleEvents();
        });
        this.audio[0].volume = playAudio ? 0.25 : 0;
        return this.audio[0].play();
      }
    };

    return Song;

  })();

}).call(this);
